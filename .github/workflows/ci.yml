name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  release:
    types: [ published ]

env:
  NODE_VERSION: '18'
  PNPM_VERSION: '8'

jobs:
  # Quality gates - run on all branches
  quality-gates:
    name: Quality Gates
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Get pnpm store directory
        id: pnpm-cache
        shell: bash
        run: echo "STORE_PATH=$(pnpm store path)" >> $GITHUB_OUTPUT
        
      - name: Setup pnpm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.pnpm-cache.outputs.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-
            
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Run TypeScript check
        run: pnpm typecheck
        
      - name: Run linting
        run: pnpm lint
        
      - name: Run unit tests
        run: pnpm test:unit
        
      - name: Build packages
        run: pnpm build
        
      - name: Upload build artifacts
        uses: actions/upload-artifact@v3
        with:
          name: build-artifacts
          path: |
            apps/*/dist
            packages/*/dist
          retention-days: 7

  # Mobile app build and test
  mobile-build:
    name: Mobile Build & Test
    runs-on: ubuntu-latest
    needs: quality-gates
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js and pnpm
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Setup Expo CLI
        run: pnpm install -g @expo/cli
        
      - name: Build mobile app (Expo)
        run: |
          cd apps/mobile
          expo export --platform=all --output-dir=dist
          
      - name: Run mobile integration tests
        run: |
          cd apps/mobile
          pnpm test:integration
          
      - name: Upload mobile build
        uses: actions/upload-artifact@v3
        with:
          name: mobile-build
          path: apps/mobile/dist
          retention-days: 7

  # Web app build and test  
  web-build:
    name: Web Build & Test
    runs-on: ubuntu-latest
    needs: quality-gates
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js and pnpm
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Build web app
        run: |
          cd apps/web
          pnpm build
          
      - name: Run web integration tests
        run: |
          cd apps/web
          pnpm test:integration
          
      - name: Upload web build
        uses: actions/upload-artifact@v3
        with:
          name: web-build
          path: apps/web/dist
          retention-days: 7

  # E2E tests (only on main/develop)
  e2e-tests:
    name: E2E Tests
    runs-on: ubuntu-latest
    needs: [mobile-build, web-build]
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Node.js and pnpm
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          
      - name: Setup pnpm
        uses: pnpm/action-setup@v2
        with:
          version: ${{ env.PNPM_VERSION }}
          
      - name: Install dependencies
        run: pnpm install --frozen-lockfile
        
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: web-build
          path: apps/web/dist
          
      - name: Run E2E tests
        run: pnpm test:e2e
        env:
          BASE_URL: http://localhost:3000
          
      - name: Upload E2E test results
        uses: actions/upload-artifact@v3
        if: always()
        with:
          name: e2e-results
          path: test-results/
          retention-days: 30

  # Deploy to development (develop branch)
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    needs: [quality-gates, mobile-build, web-build]
    if: github.ref == 'refs/heads/develop' && github.event_name == 'push'
    environment: development
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Setup Amplify CLI
        run: |
          npm install -g @aws-amplify/cli
          amplify configure set --provider awscloudformation.useProfile false
          
      - name: Deploy backend to dev
        run: |
          cd backend
          amplify init --yes --app ${{ secrets.AMPLIFY_APP_ID_DEV }}
          amplify push --yes
          
      - name: Deploy frontend to dev
        run: |
          cd apps/web
          aws s3 sync dist/ s3://${{ secrets.S3_BUCKET_DEV }}/ --delete
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_ID_DEV }} --paths "/*"
          
      - name: Post deployment tests
        run: |
          curl -f ${{ secrets.DEV_URL }}/health || exit 1
          echo "âœ… Development deployment successful"

  # Deploy to staging (release branches)
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [quality-gates, mobile-build, web-build, e2e-tests]
    if: startsWith(github.ref, 'refs/heads/release/') && github.event_name == 'push'
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Setup Amplify CLI
        run: |
          npm install -g @aws-amplify/cli
          amplify configure set --provider awscloudformation.useProfile false
          
      - name: Deploy backend to staging
        run: |
          cd backend
          amplify init --yes --app ${{ secrets.AMPLIFY_APP_ID_STAGING }}
          amplify push --yes
          
      - name: Deploy frontend to staging
        run: |
          cd apps/web
          aws s3 sync dist/ s3://${{ secrets.S3_BUCKET_STAGING }}/ --delete
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_ID_STAGING }} --paths "/*"
          
      - name: Run staging smoke tests
        run: |
          curl -f ${{ secrets.STAGING_URL }}/health || exit 1
          pnpm test:smoke --base-url ${{ secrets.STAGING_URL }}
          echo "âœ… Staging deployment successful"

  # Deploy to production (main branch)
  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [quality-gates, mobile-build, web-build, e2e-tests]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}
          
      - name: Setup Amplify CLI
        run: |
          npm install -g @aws-amplify/cli
          amplify configure set --provider awscloudformation.useProfile false
          
      - name: Deploy backend to production
        run: |
          cd backend
          amplify init --yes --app ${{ secrets.AMPLIFY_APP_ID_PROD }}
          amplify push --yes
          
      - name: Deploy frontend to production
        run: |
          cd apps/web
          aws s3 sync dist/ s3://${{ secrets.S3_BUCKET_PROD }}/ --delete
          aws cloudfront create-invalidation --distribution-id ${{ secrets.CLOUDFRONT_ID_PROD }} --paths "/*"
          
      - name: Run production health checks
        run: |
          curl -f ${{ secrets.PRODUCTION_URL }}/health || exit 1
          echo "âœ… Production deployment successful"
          
      - name: Notify deployment success
        if: success()
        run: |
          echo "ðŸš€ Production deployment completed successfully!"
          echo "URL: ${{ secrets.PRODUCTION_URL }}"

  # Security scanning
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request' || github.ref == 'refs/heads/main'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Run Snyk security scan
        uses: snyk/actions/node@master
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          args: --severity-threshold=high
          
      - name: Upload Snyk results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: snyk.sarif

  # Performance monitoring
  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    needs: web-build
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Download web build
        uses: actions/download-artifact@v3
        with:
          name: web-build
          path: apps/web/dist
          
      - name: Run Lighthouse CI
        run: |
          npm install -g @lhci/cli
          lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  # Mobile app store preparation (production only)
  mobile-store-prep:
    name: Mobile App Store Preparation
    runs-on: ubuntu-latest
    needs: [deploy-production]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        
      - name: Setup Expo CLI
        run: pnpm install -g @expo/cli eas-cli
        
      - name: Build for app stores
        run: |
          cd apps/mobile
          eas build --platform=all --non-interactive --no-wait
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}
          
      - name: Submit to app stores (manual trigger)
        if: github.event.release.published
        run: |
          cd apps/mobile
          eas submit --platform=all --non-interactive
        env:
          EXPO_TOKEN: ${{ secrets.EXPO_TOKEN }}